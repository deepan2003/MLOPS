# This is the final, corrected CI/CD pipeline.
# It uses an S3-compatible remote and has the YAML syntax errors fixed.

name: 🏥 Heart Attack MLOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  dvc-pipeline:
    name: 🔄 DVC ML Pipeline (Preprocess & Train)
    runs-on: ubuntu-latest
    outputs:
      model-changed: ${{ steps.check-changes.outputs.model-changed }}

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "dvc[s3]"
        pip install -r requirements.txt

    - name: 🔐 Configure DVC S3 Remote
      run: |
        dvc remote modify s3remote endpointurl https://play.min.io
        dvc remote default s3remote

    - name: 📊 Pull Latest Data from Remote
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: dvc pull

    - name: 🚀 Execute DVC Pipeline (Reproduce Model)
      run: dvc repro

    - name: 📈 Display Model Metrics in Summary
      run: |
        echo "## 📊 Heart Attack Model Performance" >> $GITHUB_STEP_SUMMARY
        dvc metrics show --md >> $GITHUB_STEP_SUMMARY

    - name: 🔍 Check for Model Changes
      id: check-changes
      run: |
        if git diff --quiet HEAD^ HEAD -- models/ || [ ! -d models ]; then
          echo "model-changed=false" >> $GITHUB_OUTPUT
        else
          echo "model-changed=true" >> $GITHUB_OUTPUT
        fi

    - name: 📤 Upload Data to Remote Storage
      if: github.ref == 'refs/heads/main'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: dvc push

    - name: 📦 Save Model Artifacts for Next Job
      uses: actions/upload-artifact@v4
      with:
        name: trained-model-artifacts
        path: |
          models/
          data/preprocessed/
          metrics.json
        retention-days: 7

  quality-assurance:
    name: 🧪 Quality Assurance (Tox)
    runs-on: ubuntu-latest
    needs: dvc-pipeline
    strategy:
      fail-fast: false
      matrix:
        tox-env: [py39, lint, security]
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Download Model Artifacts
      uses: actions/download-artifact@v4
      with:
        name: trained-model-artifacts

    - name: 📦 Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install tox
    - name: 🧪 Run Tox Environment
      run: tox -e ${{ matrix.tox-env }}

  deploy-to-render:
    name: "🚀 Deploy to Production (Render)"
    runs-on: ubuntu-latest
    needs: [dvc-pipeline, quality-assurance]
    if: github.ref == 'refs/heads/main' && needs.dvc-pipeline.outputs.model-changed == 'true'
    steps:
    - name: "🚀 Trigger Render Deploy"
      run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

