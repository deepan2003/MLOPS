# This is the final, corrected CI/CD pipeline.
# It is designed to deploy your application to an AWS EC2 instance via SSH.
# This approach avoids all the previous file system and versioning errors.

name: üè• MLOps Pipeline for AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  # This is the directory on your EC2 server where the project will be copied.
  PROJECT_DIR: /home/ubuntu/MLOPS

jobs:
  # This first job runs tests and checks DVC, but does not deploy.
  dvc-and-quality-check:
    name: üîÑ DVC and Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        run: pip install -r requirements.txt

      - name: üîê Configure DVC S3 Remote
        run: dvc remote modify s3remote endpointurl https://play.min.io && dvc remote default s3remote

      - name: üìä Pull Data for Testing
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: dvc pull

      - name: üöÄ Reproduce Pipeline to Check Logic
        run: dvc repro

      - name: üß™ Run Quality Checks with Tox
        run: tox -e py39,lint,security

  # This second job handles the actual deployment to your server.
  deploy-to-ec2:
    name: "üöÄ Deploy to AWS EC2"
    runs-on: ubuntu-latest
    # This job runs only after the first job succeeds.
    needs: dvc-and-quality-check
    # This job runs only when you push to the 'main' branch.
    if: github.ref == 'refs/heads/main'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìÇ Sync Project Files to EC2 Server
        # This action securely copies your project files to the server.
        uses: appleboy/scp-action@v1.0.1
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: 22
          source: "."
          target: ${{ env.PROJECT_DIR }}

      - name: üöÄ Execute Deployment Script on EC2
        # This action securely connects to your server and runs the deploy.sh script.
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: 22
          # Pass your S3 credentials to the server so 'dvc pull' can work there.
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          script: |
            cd ${{ env.PROJECT_DIR }}
            
            # This part runs the first time to set up the server.
            if [ ! -d "venv" ]; then
              echo "Setting up virtual environment for the first time..."
              python3 -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt
            fi
            
            # Make the deployment script executable and then run it.
            chmod +x deploy.sh
            ./deploy.sh