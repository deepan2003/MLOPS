# This is the final, verified CI/CD pipeline.
# The YAML syntax for the ssh-action has been corrected.

name: üè• MLOps Pipeline for AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  PROJECT_DIR: /home/ubuntu/MLOPS

jobs:
  dvc-and-quality-check:
    name: üîÑ DVC and Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install -r requirements.txt
      - run: dvc remote modify s3remote endpointurl https://play.min.io && dvc remote default s3remote
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: dvc pull
      - run: dvc repro
      - run: tox -e py39,lint,security

  deploy-to-ec2:
    name: "üöÄ Deploy to AWS EC2"
    runs-on: ubuntu-latest
    needs: dvc-and-quality-check
    if: github.ref == 'refs/heads/main'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìÇ Sync Project Files to EC2 Server
        uses: appleboy/scp-action@v1.0.1
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: 22
          source: "."
          target: ${{ env.PROJECT_DIR }}

      - name: üöÄ Execute Deployment Script on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: 22
          # CORRECTED: The env variables are now exported inside the script,
          # which fixes the YAML syntax error.
          script: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
            cd ${{ env.PROJECT_DIR }}
            
            # Run initial setup only if the venv doesn't exist
            if [ ! -d "venv" ]; then
              echo "Setting up virtual environment for the first time..."
              python3 -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt
            fi
            
            # Make the deployment script executable and then run it
            chmod +x deploy.sh
            ./deploy.sh

