name: 🏥 Heart Attack MLOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  HEROKU_APP_NAME: '

jobs:
  # 🔄 Stage 1: DVC Data Pipeline (Preprocess → Train)
  dvc-pipeline:
    name: 🔄 DVC ML Pipeline
    runs-on: ubuntu-latest
    outputs:
      model-changed: ${{ steps.check-changes.outputs.model-changed }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 💾 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dvc[gdrive] pydrive2
        pip install -r requirements.txt
        
    - name: 🔐 Configure DVC Remote (Google Drive)
      env:
        GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}
      run: |
        mkdir -p .dvc/tmp
        echo "$GDRIVE_CREDENTIALS_DATA" > .dvc/tmp/credentials.json
        dvc remote modify gdrive-storage credentialpath .dvc/tmp/credentials.json
        
    - name: 📊 Pull Latest Data from Remote
      run: dvc pull || echo "No remote data found (first run)"
        
    - name: 🚀 Execute DVC Pipeline
      run: |
        echo "📊 Starting Preprocessing Stage..."
        echo "🤖 Starting Training Stage..."
        dvc repro --force
        
    - name: 📈 Display Model Metrics
      run: |
        echo "## 📊 Heart Attack Model Performance" >> $GITHUB_STEP_SUMMARY
        echo "### Training Results:" >> $GITHUB_STEP_SUMMARY
        dvc metrics show --md >> $GITHUB_STEP_SUMMARY || echo "No metrics to display"
        
    - name: 🔍 Check for Model Changes
      id: check-changes
      run: |
        if git diff --quiet HEAD^ HEAD -- models/ || [ ! -d models ]; then
          echo "model-changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No model changes detected"
        else
          echo "model-changed=true" >> $GITHUB_OUTPUT
          echo "🔄 Model changes detected - will trigger deployment"
        fi
        
    - name: 💾 Upload Data to Remote Storage
      if: github.ref == 'refs/heads/main'
      run: dvc push || echo "No changes to push"
        
    - name: 📦 Save Model Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-model
        path: |
          models/
          data/preprocessed/
        retention-days: 30

  # 🧪 Stage 2: Quality Assurance with Tox
  tox-quality-checks:
    name: 🧪 Quality Assurance (Tox)
    runs-on: ubuntu-latest
    needs: dvc-pipeline
    strategy:
      fail-fast: false
      matrix:
        tox-env: [py311, lint, security]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Download Model Artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-model
        
    - name: 🔧 Install Tox
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
        
    - name: 🧪 Run Tox Environment [${{ matrix.tox-env }}]
      run: |
        echo "🔍 Running ${{ matrix.tox-env }} checks..."
        tox -e ${{ matrix.tox-env }}
        
    - name: 📊 Upload Test Coverage
      if: matrix.tox-env == 'py311'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: heart-attack-mlops-tests

  # 🔗 Stage 3: Integration & API Testing  
  integration-tests:
    name: 🔗 Integration Testing
    runs-on: ubuntu-latest
    needs: [dvc-pipeline, tox-quality-checks]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Download Model Artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-model
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏥 Test Flask API
      run: |
        echo "🚀 Starting Flask API server..."
        python src/api/app.py &
        API_PID=$!
        sleep 15
        
        echo "🔍 Testing health endpoint..."
        curl -f http://localhost:5000/health || (echo "❌ Health check failed" && exit 1)
        
        echo "🧪 Testing prediction endpoint..."
        curl -X POST http://localhost:5000/predict \
          -H "Content-Type: application/json" \
          -d '{
            "age": 64, "gender": 1, "pressurehight": 160,
            "pressurelow": 83, "glucose": 160.0,
            "kcm": 1.80, "troponin": 0.012
          }' | grep -q "heart_attack_risk" || (echo "❌ Prediction test failed" && exit 1)
          
        echo "✅ All API tests passed!"
        kill $API_PID
        
    - name: 🎯 Model Performance Validation
      run: |
        python -c "
        import json
        try:
            with open('models/metrics.json') as f:
                data = json.load(f)
            accuracy = data['performance_metrics']['test_accuracy']
            f1_score = data['performance_metrics']['test_f1']
            
            print(f'📊 Model Accuracy: {accuracy:.4f}')
            print(f'📊 Model F1-Score: {f1_score:.4f}')
            
            if accuracy < 0.75:
                raise ValueError(f'❌ Model accuracy {accuracy:.4f} below threshold 0.75')
            if f1_score < 0.70:
                raise ValueError(f'❌ Model F1-score {f1_score:.4f} below threshold 0.70')
                
            print('✅ Model performance meets requirements!')
        except Exception as e:
            print(f'❌ Performance validation failed: {e}')
            exit(1)
        "

  # 🚀 Stage 4: Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [dvc-pipeline, tox-quality-checks, integration-tests]
    if: github.ref == 'refs/heads/main' && needs.dvc-pipeline.outputs.model-changed == 'true'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Model Artifacts  
      uses: actions/download-artifact@v3
      with:
        name: trained-model
        
    - name: 🚀 Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ env.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: false
        
    - name: ⏳ Wait for Deployment
      run: |
        echo "⏳ Waiting for Heroku deployment to complete..."
        sleep 45
        
    - name: 🏥 Production Health Check
      run: |
        echo "🔍 Checking production health..."
        curl -f https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/health
        
    - name: 🧪 Production Smoke Test
      run: |
        echo "🧪 Running production smoke test..."
        response=$(curl -s -X POST https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/predict \
          -H "Content-Type: application/json" \
          -d '{
            "age": 64, "gender": 1, "pressurehight": 160,
            "pressurelow": 83, "glucose": 160.0,
            "kcm": 1.80, "troponin": 0.012
          }')
        
        echo "📋 API Response: $response"
        echo "$response" | grep -q "heart_attack_risk" || (echo "❌ Smoke test failed" && exit 1)
        echo "✅ Production deployment successful!"

  # 📈 Stage 5: Post-Deployment Monitoring
  post-deployment:
    name: 📈 Monitoring & Notifications
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result != 'skipped'
    
    steps:
    - name: 📊 Create Deployment Summary
      run: |
        echo "# 🎉 Heart Attack MLOps Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **🌍 Production URL**: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com" >> $GITHUB_STEP_SUMMARY
        echo "- **📅 Deployed At**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **🔄 Pipeline Status**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **🏥 Ready for Hospital Use**: ✅" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔔 Notify Team (Optional)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🏥 Heart Attack Prediction API Deployed!",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "🌍 Production URL",
                    "value": "https://${{ env.HEROKU_APP_NAME }}.herokuapp.com",
                    "short": false
                  },
                  {
                    "title": "📊 Status",
                    "value": "✅ Ready for Hospital Use",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
