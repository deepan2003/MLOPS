name: 🏥 Heart Attack MLOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # CORRECTED: Your tox.ini is configured for Python 3.9
  PYTHON_VERSION: '3.9'

jobs:
  # --------------------------------------------------------------------
  # STAGE 1: DVC DATA PIPELINE (PREPROCESS & TRAIN)
  # --------------------------------------------------------------------
  dvc-pipeline:
    name: 🔄 DVC ML Pipeline
    runs-on: ubuntu-latest
    outputs:
      model-changed: ${{ steps.check-changes.outputs.model-changed }}

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # MODIFIED: Removed gdrive extra, just need core dvc
        pip install dvc
        pip install -r requirements.txt

    - name: 🔐 Configure DVC Studio Remote
      # MODIFIED: This entire step is replaced for DVC Studio
      env:
        DVC_STUDIO_TOKEN: ${{ secrets.DVC_STUDIO_TOKEN }}
        DVC_STUDIO_USERNAME: ${{ secrets.DVC_STUDIO_USERNAME }}
      run: |
        dvc remote add studio https://studio.dvc.org/api/dvc/$DVC_STUDIO_USERNAME/heart-attack-project
        dvc remote modify studio --local auth basic
        dvc remote modify studio --local user $DVC_STUDIO_USERNAME
        dvc remote modify studio --local password $DVC_STUDIO_TOKEN
        dvc remote default studio

    - name: 📊 Pull Latest Data from Remote
      run: dvc pull

    - name: 🚀 Execute DVC Pipeline (Reproduce Model)
      run: dvc repro --force

    - name: 📈 Display Model Metrics
      run: |
        echo "## 📊 Heart Attack Model Performance" >> $GITHUB_STEP_SUMMARY
        dvc metrics show --md >> $GITHUB_STEP_SUMMARY

    - name: 🔍 Check for Model Changes
      id: check-changes
      run: |
        if git diff --quiet HEAD^ HEAD -- models/ || [ ! -d models ]; then
          echo "model-changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No model changes detected."
        else
          echo "model-changed=true" >> $GITHUB_OUTPUT
          echo "✅ Model changes detected - will trigger deployment."
        fi

    - name: 💾 Upload Data to Remote Storage
      if: github.ref == 'refs/heads/main'
      run: dvc push

    - name: 📦 Save Model Artifacts for Next Jobs
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: |
          models/
          data/preprocessed/
        retention-days: 7

  # --------------------------------------------------------------------
  # STAGE 2: QUALITY ASSURANCE
  # --------------------------------------------------------------------
  tox-quality-checks:
    name: 🧪 Quality Assurance (Tox)
    runs-on: ubuntu-latest
    needs: dvc-pipeline
    strategy:
      fail-fast: false
      matrix:
        # CORRECTED: Your tox.ini has py39, not py311
        tox-env: [py39, lint, security]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Download Model Artifacts
      uses: actions/download-artifact@v4
      with:
        name: trained-model

    - name: 🔧 Install Tox
      run: pip install tox

    - name: 🧪 Run Tox Environment [${{ matrix.tox-env }}]
      run: tox -e ${{ matrix.tox-env }}

  # --------------------------------------------------------------------
  # STAGE 3: INTEGRATION & API TESTING
  # --------------------------------------------------------------------
  integration-tests:
    name: 🔗 Integration Testing
    runs-on: ubuntu-latest
    needs: [dvc-pipeline, tox-quality-checks]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Download Model Artifacts
      uses: actions/download-artifact@v4
      with:
        name: trained-model

    - name: 🔧 Install Dependencies
      run: pip install -r requirements.txt

    - name: 🏥 Test Flask API
      run: |
        echo "🚀 Starting Flask API server..."
        # CORRECTED: Your app.py is in the root directory
        python app.py &
        API_PID=$!
        sleep 15

        echo "🔍 Testing health endpoint..."
        curl -f http://localhost:5000/health || (echo "❌ Health check failed" && exit 1)

        echo "🧪 Testing prediction endpoint..."
        curl -X POST http://localhost:5000/predict \
          -H "Content-Type: application/json" \
          -d '{
            "age": 64, "gender": 1, "pressurehight": 160,
            "pressurelow": 83, "glucose": 160.0,
            "kcm": 1.80, "troponin": 0.012
          }' | grep -q "heart_attack_risk" || (echo "❌ Prediction test failed" && exit 1)

        echo "✅ All API tests passed!"
        kill $API_PID

    - name: 🎯 Model Performance Validation
      run: |
        python -c "
        import json
        try:
            with open('models/metrics.json') as f:
                data = json.load(f)
            accuracy = data['performance_metrics']['test_accuracy']
            f1_score = data['performance_metrics']['test_f1']

            print(f'📊 Model Accuracy: {accuracy:.4f}')
            print(f'📊 Model F1-Score: {f1_score:.4f}')

            if accuracy < 0.75:
                raise ValueError(f'❌ Model accuracy {accuracy:.4f} below threshold 0.75')
            if f1_score < 0.70:
                raise ValueError(f'❌ Model F1-score {f1_score:.4f} below threshold 0.70')

            print('✅ Model performance meets requirements!')
        except Exception as e:
            print(f'❌ Performance validation failed: {e}')
            exit(1)
        "

  # --------------------------------------------------------------------
  # STAGE 4: PRODUCTION DEPLOYMENT
  # --------------------------------------------------------------------
  deploy-production:
    name: "🚀 Deploy to Production (Render)"
    runs-on: ubuntu-latest
    needs: [dvc-pipeline, tox-quality-checks, integration-tests]
    if: github.ref == 'refs/heads/main' && needs.dvc-pipeline.outputs.model-changed == 'true'

    steps:
      - name: "🚀 Trigger Render Deploy"
        # MODIFIED: Using the simpler and more secure Render Deploy Hook
        # You need to store your hook URL as a secret named RENDER_DEPLOY_HOOK
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

  # --------------------------------------------------------------------
  # STAGE 5: POST-DEPLOYMENT MONITORING & NOTIFICATION
  # --------------------------------------------------------------------
  post-deployment:
    name: 📈 Monitoring & Notifications
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result != 'skipped'

    steps:
    - name: 📊 Create Deployment Summary
      run: |
        echo "# 🎉 Heart Attack MLOps Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        # MODIFIED: Removed specific URL as it's managed in Render
        echo "- **Platform**: Render" >> $GITHUB_STEP_SUMMARY
        echo "- **📅 Deployed At**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **🔄 Pipeline Status**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY

